#LyX 2.4 created this file. For more info see https://www.lyx.org/
\lyxformat 620
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children no
\language french
\language_package default
\inputencoding utf8
\fontencoding auto
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_roman_osf false
\font_sans_osf false
\font_typewriter_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement class
\float_alignment class
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_formatted_ref 0
\use_minted 0
\use_lineno 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style french
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tablestyle default
\tracking_changes false
\output_changes false
\change_bars false
\postpone_fragile_content true
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\docbook_table_output 0
\docbook_mathml_prefix 1
\end_header

\begin_body

\begin_layout Title
Corrigé - TD 03 :
 Programmation en C
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
Ce corrigé propose les solutions détaillées des exercices du TD 03,
 portant sur des algorithmes en C.
 Il couvre des sujets variés,
 notamment les points fixes dans un tableau,
 les déplacements aux échecs,
 les calculs financiers,
 et la manipulation de fichiers.
\end_layout

\begin_layout Section
Exercice 1 :
 Point fixe d’un tableau
\end_layout

\begin_layout Subsection
Question 1.1 :
 Algorithme
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

Un point fixe est un indice 
\backslash
(i
\backslash
) tel que 
\backslash
(t[i] = i
\backslash
).
 Voici l'algorithme proposé pour résoudre ce problème :
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <stdbool.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool fixpt(int t[],
 int n) {
\end_layout

\begin_layout Plain Layout

    for (int i = 0;
 i < n;
 i++) {
\end_layout

\begin_layout Plain Layout

        if (t[i] == i) {
\end_layout

\begin_layout Plain Layout

            return true;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return false;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Explication
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

L'algorithme parcourt le tableau élément par élément et compare la valeur de chaque case 
\backslash
(t[i]
\backslash
) à son indice 
\backslash
(i
\backslash
).
 Si une égalité est trouvée,
 un point fixe existe.
\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercice 2 :
 Déplacement d’un fou aux échecs
\end_layout

\begin_layout Subsection
Question 2.1 :
 Domaines
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

- Entrées :
 Deux paires d'entiers (
\backslash
(x_1,
 y_1
\backslash
) et 
\backslash
(x_2,
 y_2
\backslash
)) représentant les coordonnées.
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

- Sorties :
 Un booléen qui indique si le déplacement est valide.
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Question 2.2 :
 Relation entre positions
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

Un fou se déplace uniquement en diagonale,
 ce qui impose :
\end_layout

\begin_layout Plain Layout


\backslash
[|x_2 - x_1| = |y_2 - y_1|
\backslash
]
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Code
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <stdbool.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool move_bishop(int x1,
 int y1,
 int x2,
 int y2) {
\end_layout

\begin_layout Plain Layout

    if (x1 < 0 || x1 > 7 || y1 < 0 || y1 > 7 || x2 < 0 || x2 > 7 || y2 < 0 || y2 > 7) {
\end_layout

\begin_layout Plain Layout

        return false;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return abs(x2 - x1) == abs(y2 - y1);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercice 3 :
 État des finances
\end_layout

\begin_layout Subsection
Question 3.1 :
 Algorithme
\end_layout

\begin_layout Standard
Pour calculer les soldes de chaque personne dans un groupe,
 l'algorithme suit ces étapes :
\end_layout

\begin_layout Standard
1.
 Lire les noms des personnes impliquées.
\end_layout

\begin_layout Standard
2.
 Initialiser un tableau pour les soldes à zéro.
\end_layout

\begin_layout Standard
3.
 Parcourir les transactions et mettre à jour les soldes des débiteurs et créanciers.
\end_layout

\begin_layout Standard
4.
 Afficher les soldes finaux.
\end_layout

\begin_layout Subsection
Question 3.3 :
 Recherche d’un indice
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int find_index_by_name(char *names[],
 int n,
 char *target) {
\end_layout

\begin_layout Plain Layout

    for (int i = 0;
 i < n;
 i++) {
\end_layout

\begin_layout Plain Layout

        if (strcmp(names[i],
 target) == 0) {
\end_layout

\begin_layout Plain Layout

            return i;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return -1;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Question 3.4 :
 Fonction complète
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <stdio.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

#include <string.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void compute_amount(const char *filename) {
\end_layout

\begin_layout Plain Layout

    FILE *file = fopen(filename,
 "r");
\end_layout

\begin_layout Plain Layout

    if (!file) {
\end_layout

\begin_layout Plain Layout

        perror("Erreur lors de l'ouverture du fichier");
\end_layout

\begin_layout Plain Layout

        return;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    int n;
\end_layout

\begin_layout Plain Layout

    fscanf(file,
 "%d",
 &n);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    char *names[n];
\end_layout

\begin_layout Plain Layout

    int balances[n];
\end_layout

\begin_layout Plain Layout

    for (int i = 0;
 i < n;
 i++) {
\end_layout

\begin_layout Plain Layout

        balances[i] = 0;
\end_layout

\begin_layout Plain Layout

        names[i] = malloc(50 * sizeof(char));
\end_layout

\begin_layout Plain Layout

        fscanf(file,
 "%s",
 names[i]);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    char debtor[50],
 creditor[50];
\end_layout

\begin_layout Plain Layout

    int amount;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    while (fscanf(file,
 "%s %s %d",
 debtor,
 creditor,
 &amount) == 3) {
\end_layout

\begin_layout Plain Layout

        int debtor_index = find_index_by_name(names,
 n,
 debtor);
\end_layout

\begin_layout Plain Layout

        int creditor_index = find_index_by_name(names,
 n,
 creditor);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        if (debtor_index == -1 || creditor_index == -1) {
\end_layout

\begin_layout Plain Layout

            printf("Erreur :
 Nom introuvable.
\backslash
n");
\end_layout

\begin_layout Plain Layout

            continue;
\end_layout

\begin_layout Plain Layout

        }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

        balances[debtor_index] -= amount;
\end_layout

\begin_layout Plain Layout

        balances[creditor_index] += amount;
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    fclose(file);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

    for (int i = 0;
 i < n;
 i++) {
\end_layout

\begin_layout Plain Layout

        printf("%s :
 %d
\backslash
n",
 names[i],
 balances[i]);
\end_layout

\begin_layout Plain Layout

        free(names[i]);
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercice 4 :
 Implémentation (Déplacement d’un fou)
\end_layout

\begin_layout Subsection
Question 4.1 :
 Implémentation en C
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <stdbool.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool move_bishop(int x1,
 int y1,
 int x2,
 int y2) {
\end_layout

\begin_layout Plain Layout

    if (x1 < 0 || x1 > 7 || y1 < 0 || y1 > 7 || x2 < 0 || x2 > 7 || y2 < 0 || y2 > 7) {
\end_layout

\begin_layout Plain Layout

        return false;
 // Coordonnées hors de l'échiquier
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\begin_layout Plain Layout

    return abs(x2 - x1) == abs(y2 - y1);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Exercice 5 :
 Déplacement d’un cavalier
\end_layout

\begin_layout Subsection
Question 5.1 :
 Relation entre positions
\end_layout

\begin_layout Standard
Un déplacement légal du cavalier respecte :
\end_layout

\begin_layout Subsection
Question 5.2 :
 Fonction move_knight
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

#include <stdbool.h>
\end_layout

\begin_layout Plain Layout

#include <stdlib.h>
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

bool move_knight(int x1,
 int y1,
 int x2,
 int y2) {
\end_layout

\begin_layout Plain Layout

    int dx = abs(x2 - x1);
\end_layout

\begin_layout Plain Layout

    int dy = abs(y2 - y1);
\end_layout

\begin_layout Plain Layout

    return (dx == 2 && dy == 1) || (dx == 1 && dy == 2);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
